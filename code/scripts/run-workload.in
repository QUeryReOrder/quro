#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006 Mark Wong & Open Source Development Labs, Inc.
#
# 2006 Rilson Nascimento

abs_top_srcdir=@abs_top_srcdir@
DBDIR=@database_to_use@
source ${abs_top_srcdir}/scripts/dbt5_profile || exit 1

trap 'echo "Test was interrupted by Control-C."; \
	killall BrokerageHouseMain; killall DriverMarketMain; killall DriverMain; \
	killall sar; killall sadc; killall vmstat; killall iostat; \
        ${DB_COMMAND} ${abs_top_srcdir}/scripts/${DBDIR}/stop-db' INT
trap 'echo "Test was interrupted. Got TERM signal."; \
	killall BrokerageHouseMain; killall DriverMarketMain; killall DriverMain; \
	killall client; killall driver;  killall sar; killall sadc; killall vmstat; killall iostat; \
	${DB_COMMAND} ${abs_top_srcdir}/scripts/${DBDIR}/stop-db' TERM

do_sleep()
{
    echo "Sleeping $1 seconds"
    sleep $1
}

make_directories()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	fi
	${COMMAND} mkdir -p ${OUTPUT_DIR}
	${COMMAND} mkdir -p ${BH_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DRIVER_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DB_OUTPUT_DIR}
}

oprofile_annotate()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "oprofile is annotating source: ${HOST}"
	${COMMAND} mkdir -p ${DIR}/oprofile/
	${COMMAND} mkdir -p ${DIR}/oprofile/annotate
	if [ -n "${COMMAND}" ]; then
		${COMMAND} "sudo opannotate --source --assembly > ${DIR}/oprofile/assembly.txt" > /dev/null 2>&1
	else
		sudo opannotate --source --assembly > ${DIR}/oprofile/assembly.txt > /dev/null 2>&1
	fi
	${COMMAND} sudo opannotate --source --output-dir=${DIR}/oprofile/annotate > /dev/null 2>&1
}

oprofile_collect()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	#
	# I don't think we need any output dumped to the terminal.
	#
	echo "oprofile is dumping data: ${HOST}"
	${COMMAND} sudo opcontrol --dump
	if [ -n "${COMMAND}" ]; then
		${COMMAND} "sudo opreport -l -p /lib/modules/`${COMMAND} uname -r` -o ${DIR}/oprofile.txt > /dev/null 2>&1"
		${COMMAND} "sudo opreport -l -c -p /lib/modules/`${COMMAND} uname -r` -o ${DIR}/callgraph.txt > /dev/null 2>&1"
	else
		sudo opreport -l -p /lib/modules/`uname -r` \
				-o ${DIR}/oprofile.txt > /dev/null 2>&1
		sudo opreport -l -c -p /lib/modules/`uname -r` \
				-o ${DIR}/callgraph.txt > /dev/null 2>&1
	fi
	${COMMAND} sudo opcontrol --stop
}

oprofile_reset()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "reseting oprofile counters: ${HOST}"
	${COMMAND} sudo opcontrol --reset
}

oprofile_stop()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "stopping oprofile daemon: ${HOST}"
	${COMMAND} sudo opcontrol --shutdown
}

readprofile_collect()
{
	COMMAND=""
	DIR=${1}
	HOST=${2}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "collecting readprofile data: ${HOST}"
	PROFILE=${DIR}/readprofile.txt
	if [ -n "${COMMAND}" ]; then
		${COMMAND} "/usr/sbin/readprofile -n -m /boot/System.map-`${COMMAND} uname -r` > ${PROFILE}"
		${COMMAND} "cat ${PROFILE} | sort -n -r -k1 > ${DIR}/readprofile_ticks.txt"
		${COMMAND} "cat ${PROFILE} | sort -n -r -k3 > ${DIR}/readprofile_load.txt"
	else
		/usr/sbin/readprofile -n \
				-m /boot/System.map-`${COMMAND} uname -r` > ${PROFILE}
		cat ${PROFILE} | sort -n -r -k1 > ${DIR}/readprofile_ticks.txt
		cat ${PROFILE} | sort -n -r -k3 > ${DIR}/readprofile_load.txt
	fi
}

oprofile_init()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "starting oprofile: ${HOST}"
	${COMMAND} sudo opcontrol \
			--vmlinux=/usr/src/linux-`${COMMAND} uname -r`/vmlinux -c 100
	sleep 1
	START_ARGS=""
	MACHINE=`${COMMAND} uname -m`
	if [ "${MACHINE}" == "ppc64" ]; then
		#
		# Oprofile fails to work on ppc64 because the defaults settings
		# are invalid on this platform.  Why isn't it smart enough to
		# have valid default setting depending on arch?
		#
		START_ARGS="-e CYCLES:150000:0:1:1"
	fi
	${COMMAND} sudo opcontrol --start-daemon ${START_ARGS}
	sleep 1
	${COMMAND} sudo opcontrol --start
}

readprofile_clear()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	else
		HOST=`hostname`
	fi
	echo "clearing readprofile data: ${HOST}"
	if [ -n "${COMMAND}" ]; then
		${COMMAND} "sudo /usr/sbin/readprofile -r"
	else
		sudo /usr/sbin/readprofile -r
	fi
}

usage()
{
	if [ "$1" != "" ]; then
		echo
		echo "error: $1"
	fi

	echo ''
	echo 'usage: run_workload.sh -c <number of customers> -t <duration of test> -u <number of users> -e <seed>'
	echo 'other options:'
	echo '       -d <database parameters>'
	echo '       -f <scale factor. (default 500)>'
	echo '       -h <database host name. (default localhost)>'
	echo '       -i <initial trade days. (default 300)>'
	echo '       -l <pacing delay. (default 0)>'
	echo '       -n <database name. (default dbt5)>'
	echo '       -o # enable oprofile profiler'
	echo '       -p <database port number. (default 5432)>'
	echo '       -s <delay of starting of new thread in milliseconds (default 1000)>'
	echo '       -z <comment describing this test run>'
	echo ''
	echo 'Example: sh run_workload.sh -c 1000 -t 300 -u 3 -e 5 -i 10'
	echo 'Test will be run for 300 seconds with 3 users, on a 1000 customers database with 10 initial trade days, and seed 5'
	echo ''
}

validate_parameter()
{
	if [ "$2" != "$3" ]; then
		usage "wrong argument '$2' for parameter '-$1'"
		exit 1
	fi
}

DB_HOSTNAME="localhost"
DB_NAME="dbt5"
DB_PORT=5432
SCALE_FACTOR=500
SLEEPY=1000 # milliseconds
USE_OPROFILE=0
USE_READPROFILE=0

while getopts "c:d:e:f:h:i:l:orp:s:t:u:w:z:" opt; do
	case $opt in
	c)
		# Configured customer count
		CUSTOMERS=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $CUSTOMERS
		;;
	d)
		DB_PARAMS=$OPTARG
		;;
	e)	
		SEED=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $SEED
		;;
	f)	
		SCALE_FACTOR=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $SCALE_FACTOR
		;;
	h)
		DB_HOSTNAME=$OPTARG
		DB_COMMAND="ssh ${DB_HOSTNAME}"
		;;
	i)	
		# intial trade days
		ITD=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $ITD
		;;
	l)	
		PACING_DELAY=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $PACING_DELAY
		;;
	n)
		DB_NAME=$OPTARG
		;;
	o)
		USE_OPROFILE=1
		;;
	r)
		USE_READPROFILE=1
		;;
	p)
		# postmaster port
		DB_PORT=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DB_PORT
		;;
	s)
		SLEEPY=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $SLEEPY
		;;
	t)
		# duration of the test
		DURATION=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DURATION
		;;
	u)
		USERS=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $USERS
		;;
	z)
		COMMENT=$OPTARG
		;;
	esac
done

# Check parameters.

if [ "$CUSTOMERS" == "" ]; then
	usage "specify the number of configured customers -c #"
	exit 1
fi

if [ "$DURATION" == "" ]; then
	usage "specify the duration of the test in seconds using -t #"
	exit 1
fi

if [ "$USERS" == "" ]; then
	usage "specify the number of users using -u #"
	exit 1
fi

if [ "$SEED" == "" ]; then
	usage "specify the seed using -e #"
	exit 1
fi

#ULIMIT_N=`ulimit -n`
#ESTIMATED_ULIMIT=$(( 2*${WAREHOUSES}*${THREADS_PER_WAREHOUSE}+${DBCON} ))
#if [ ${ULIMIT_N} -lt $(( $ESTIMATED_ULIMIT )) ]; then
#  usage "you're open files ulimit is too small, must be at least ${ESTIMATED_ULIMIT}"
#  exit 1
#fi

# Determine the output directory for storing data.
RUN_NUMBER=-1
RUN_FILE="${abs_top_srcdir}/scripts/run_number"
if test -f ${RUN_FILE}; then
  read RUN_NUMBER < ${RUN_FILE}
fi
if [ $RUN_NUMBER -eq -1 ]; then
	RUN_NUMBER=0
fi
OUTPUT_DIR=${abs_top_srcdir}/scripts/output/${RUN_NUMBER}
BH_OUTPUT_DIR=$OUTPUT_DIR/bh
DRIVER_OUTPUT_DIR=$OUTPUT_DIR/driver
DB_OUTPUT_DIR=$OUTPUT_DIR/db

# Create the directories we will need.
make_directories
if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
	make_directories ${DB_HOSTNAME}
	@RSYNC@ -a -e "ssh" --delete ${DB_OUTPUT_DIR}/ \
		${DB_HOSTNAME}:${DB_OUTPUT_DIR}/
fi

# Update log.html
echo "<a href='$RUN_NUMBER/'>$RUN_NUMBER</a>: $COMMENT<br />" >> ${abs_top_srcdir}/scripts/output/log.html

# Update the run number for the next test.
RUN_NUMBER=`expr $RUN_NUMBER + 1`
echo ${RUN_NUMBER} > ${RUN_FILE}

# Create a readme file in the output directory and date it.
date >> $OUTPUT_DIR/readme.txt
echo "$COMMENT" >> $OUTPUT_DIR/readme.txt
uname -a >> $OUTPUT_DIR/readme.txt
echo "Command line: $0 $@" >> $OUTPUT_DIR/readme.txt

# Get any OS specific information.
OS_DIR=`uname`
$abs_top_srcdir/scripts/$OS_DIR/get_os_info.sh -o $OUTPUT_DIR

# Output run information into the readme.txt.
echo "Database Scale Factor: $CUSTOMERS customers" >> $OUTPUT_DIR/readme.txt
echo "Test Duration: $DURATION seconds" >> $OUTPUT_DIR/readme.txt

# Restart PostgreSQL
${DB_COMMAND} $abs_top_srcdir/scripts/${DBDIR}/stop-db
if [ -n "${DB_COMMAND}" ]; then
	${DB_COMMAND} "${abs_top_srcdir}/scripts/${DBDIR}/start-db -p \"${DB_PARAMS}\" -o ${DB_OUTPUT_DIR}" || exit 1
else
	${abs_top_srcdir}/scripts/${DBDIR}/start-db -p "${DB_PARAMS}" \
			-o ${DB_OUTPUT_DIR} || exit 1
fi

echo ""
echo "************************************************************************"
echo "*                  DBT-5 test for PostgreSQL started                   *"
echo "*                                                                      *"
echo "*            Results can be found in output/$(( $RUN_NUMBER-1 )) directory               *"
echo "************************************************************************"
echo "*                                                                      *"
echo "*  Test consists of 4 stages:                                          *"
echo "*                                                                      *"
echo "*  1. Start of the Brokerage House server                              *"
echo "*  2. Start of the Market Exchange server                              *"
echo "*  3. Test (Start of the Customer Emulator)                            *"
echo "*  4. Processing of results                                            *"
echo "*                                                                      *"
echo "************************************************************************"

#
# Start the Brokerage House server.
#
echo
echo "1. Starting Brokerage House server"
${abs_top_srcdir}/src/BrokerageHouseMain -s ${DB_HOSTNAME} -d ${DB_NAME} \
		-p ${DB_PORT} \
		-o ${DRIVER_OUTPUT_DIR} > ${OUTPUT_DIR}/bh.out 2>&1 &

do_sleep 1

#
# Start the Market server.
#
echo
echo "2. Starting Market Exchange server"
${abs_top_srcdir}/src/DriverMarketMain -c ${CUSTOMERS} -a ${CUSTOMERS} \
		-s ${EGENDIR}/flat_in/Security.txt \
		-o ${DRIVER_OUTPUT_DIR} > ${OUTPUT_DIR}/market.out 2>&1 &

# Start collecting data before we start the test.
SLEEP_RAMPUP=$(( (($USERS+1)*$SLEEPY/1000) ))
SLEEPYTIME=$(( $SLEEP_RAMPUP+$DURATION ))
SAMPLE_LENGTH=60
ITERNATIONS=$(( ($SLEEPYTIME/$SAMPLE_LENGTH)+1 ))
${abs_top_srcdir}/scripts/sysstats.sh --iter ${ITERNATIONS} \
		--sample ${SAMPLE_LENGTH} \
		--outdir ${OUTPUT_DIR} > ${OUTPUT_DIR}/stats.out 2>&1 &
${DB_COMMAND} ${abs_top_srcdir}/scripts/${DBDIR}/db-stat \
		-o ${DB_OUTPUT_DIR} \
		-i ${ITERNATIONS} \
		-p ${DB_PORT} \
		-s ${SAMPLE_LENGTH} > ${OUTPUT_DIR}/dbstats.out 2>&1 &

# Initialize oprofile before we start the driver.
if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_init
	if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
		oprofile_init ${DB_HOSTNAME}
	fi
fi

#
# Start the Customer Driver.
#

echo
echo "3. Starting Customer driver: $USERS user(s), 1 user starting every $SLEEPY milliseconds..."
${abs_top_srcdir}/src/DriverMain -c ${CUSTOMERS} -a ${CUSTOMERS} \
		-f ${SCALE_FACTOR} -d ${ITD} -t ${DURATION} -s ${SLEEPY} \
		-u ${USERS} -p ${PACING_DELAY} -g ${SEED} \
		-e ${EGENDIR}/flat_in \
		-o ${DRIVER_OUTPUT_DIR} > ${OUTPUT_DIR}/driver.out 2>&1 &
DCMPID=`ps -C DriverMain -o pid=`
echo "Results will be written to: $OUTPUT_DIR"

do_sleep $SLEEP_RAMPUP

# Clear the readprofile data after the driver ramps up.
if [ ${USE_READPROFILE} -eq 1 ]; then
    if [ -f /proc/profile ]; then
	    readprofile_clear
    fi
    if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
	    readprofile_clear ${DB_HOSTNAME}
    fi
fi

# Reset the oprofile counters after the driver ramps up.
if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_reset
	if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
		oprofile_reset ${DB_HOSTNAME}
	fi
fi

# Sleep for the duration of the run.
do_sleep $DURATION

# Wait for DriverMain to exit
#if [ -n ${DCMPID} ]; then
	#wait ${DCMPID}
#fi

# Collect profile data.
if [ ${USE_READPROFILE} -eq 1 ]; then
    if [ -f /proc/profile ]; then
	    readprofile_collect ${OUTPUT_DIR}
    fi
    if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
	    readprofile_collect ${DB_OUTPUT_DIR} ${DB_HOSTNAME}
    fi
fi

# Collect oprofile data.
if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_collect ${OUTPUT_DIR}
	if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
		oprofile_collect ${DB_OUTPUT_DIR} ${DB_HOSTNAME}
	fi
fi

# sort and merge emulators mix files into mix.log
sort -t "," -k 1 ${DRIVER_OUTPUT_DIR}/ce_mix.log \
		${DRIVER_OUTPUT_DIR}/mee_mix.log \
		-o $DRIVER_OUTPUT_DIR/mix.log

# Run some post processing analysese.
echo
echo "4. Run Post processing analyses"

${abs_top_srcdir}/scripts/post-process --dir ${OUTPUT_DIR} \
		--xml > ${DRIVER_OUTPUT_DIR}/results.out

# Servers don't go away by themselves like the driver does, so kill it.
echo "Killing Servers..."
killall BrokerageHouseMain DriverMarketMain DriverMain 2> /dev/null

${DB_COMMAND} ${abs_top_srcdir}/scripts/${DBDIR}/stop-db

if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_annotate ${OUTPUT_DIR} &
	if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
		oprofile_annotate ${DB_OUTPUT_DIR} ${DB_HOSTNAME} &
	fi
	wait
fi

if [ ${USE_OPROFILE} -eq 1 ]; then
	oprofile_stop
	if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
		oprofile_stop ${DB_HOSTNAME}
	fi
fi


if [ -n ${DB_HOSTNAME} -a ! "${DB_HOSTNAME}" == "localhost" ]; then
	@RSYNC@ -a -e "ssh" --delete ${DB_HOSTNAME}:${DB_OUTPUT_DIR}/ \
			${DB_OUTPUT_DIR}/
fi

# Move the database log.  (No, not the transaction log.)
chmod 644 ${DB_OUTPUT_DIR}/log

# Postprocessing of Database Statistics
@SAR@ -f ${OUTPUT_DIR}/sar_raw.out -A > ${OUTPUT_DIR}/sar.out
perl $abs_top_srcdir/scripts/${DBDIR}/analyze_stats.pl --dir $DB_OUTPUT_DIR

echo ">> Test completed."
echo "Results are in: $OUTPUT_DIR"
echo

cat $DRIVER_OUTPUT_DIR/results.out
