#!/usr/bin/env python

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006      Open Source Development Labs, Inc.
#               2006      Rilson Nascimento.
#               2006-2010 Mark Wong
#

import sys
from math import ceil, floor, fsum

def average(values):
    count = float(len(values))
    if count == 0:
        return 0
    return fsum(values) / float(len(values))

def percentile_90(values):
    index = 0.9 * float(len(values))
    findex = int(floor(index))
    cindex = int(ceil(index))
    values.sort()
    try:
        if findex == cindex:
            return values[findex - 1]
        return (values[findex - 1] + values [cindex - 1]) / 2.0
    except:
        return 0

if len(sys.argv) != 2:
    print 'usage: %s <mix.log>' % sys.argv[0]
    exit(1)

filename = sys.argv[1]

try:
    f = open(filename, 'r')
except:
    print 'cannot open file: %s' % filename
    exit(1)

rampup_start = None
rampup_end = None
steadystate_start = None
steadystate_end = None

to = '0'
tr = '1'
tl = '2'
tu = '3'
ts = '4'
cp = '5'
bv = '6'
sd = '7'
mf = '8'
mw = '9'
dm = '10'
tc = '11'

transaction_list = [tr, bv, cp, mf, mw, sd, tl, to, ts, tu, dm, tc]

error_count = dict()
invalid_count = dict()
response_time = dict()
rollback_count = dict()
transaction_count = dict()
warning_count = dict()

for key in transaction_list:
    error_count[key] = 0
    invalid_count[key] = 0
    response_time[key] = list()
    rollback_count[key] = 0
    transaction_count[key] = 0
    warning_count[key] = 0

total_transaction_count = 0

for line in f:
    c = line.strip().split(',')

    if len(c) != 5:
        print 'unknown number of columns: %d' % len(c)
        print 'exiting'
        exit(2)

    if rampup_start is None:
        rampup_start = long(c[0])

    if c[1] == 'START':
        rampup_end = long(c[0])
        steadystate_start = long(c[0])
        continue

    key = c[1]
    status = int(c[2])
    rt = float(c[3])

    if key not in transaction_list:
        print 'unknown transaction information: %s' % line
        exit(3)

    transaction_count[key] += 1
    response_time[key].append(rt)
    if status == 1:
        rollback_count[key] += 1
    elif status > 0:
        warning_count[key] += 1
    elif status < 0:
        invalid_count[key] += 1
    else:
        error_count[key] += 1

    if key != '10':
        total_transaction_count += 1

if rampup_end is None:
    print 'START marker not found'
    exit(3)

transaction_name = dict()
transaction_name[to] = 'Trade Order'
transaction_name[tr] = 'Trade Result'
transaction_name[tl] = 'Trade Lookup'
transaction_name[tu] = 'Trade Update'
transaction_name[ts] = 'Trade Status'
transaction_name[cp] = 'Customer Position'
transaction_name[bv] = 'Broker Volume'
transaction_name[sd] = 'Security Detail'
transaction_name[mf] = 'Market Feed'
transaction_name[mw] = 'Market Watch'
transaction_name[dm] = 'Data Maintenance'

steadystate_end = long(c[0])

print '%39s' % 'Response Time'
print '%37s' % '(seconds)'
print '%-17s      %% %s:%5s %% %7s %15s %7s %7s' % (
        'Transaction', 'Average', '90th', 'Total', 'Rollbacks     %', 'Warning',
        'Invalid')
print '----------------- ------ --------------- ------- --------------- ' \
        '------- -------'
for key in [tr, bv, cp, mf, mw, sd, tl, to, ts, tu]:
    try:
        mix_percentage = float(transaction_count[key]) / \
                float(total_transaction_count) * 100.0
    except:
        mix_percentage = 0

    try:
        rollback_percentage = float(rollback_count[key]) / \
                float(transaction_count[key]) * 100.0
    except:
        rollback_percentage = 0

    print '%-17s %6.2f %7.3f:%7.3f %7d %7d %6.2f%% %7d %7d' % (
            transaction_name[key],
            mix_percentage,
            average(response_time[key]),
            percentile_90(response_time[key]),
            transaction_count[key],
            rollback_count[key],
            rollback_percentage,
            warning_count[key],
            invalid_count[key])
try:
    rollback_percentage = float(rollback_count[dm]) / \
            float(transaction_count[dm]) * 100.0
except:
    rollback_percentage = 0

print '%-17s %6s %7.3f:%7.3f %7d %7d %6.2f%% %7d %7d' % (
        transaction_name[dm],
        'N/A',
        average(response_time[dm]),
        percentile_90(response_time[dm]),
        transaction_count[dm],
        rollback_count[dm],
        rollback_percentage,
        warning_count[dm],
        invalid_count[dm])
print '----------------- ------ --------------- ------- --------------- ' \
        '------- -------'

duration = float(steadystate_end - steadystate_start)
print '%0.2f trade-result transactions per second (trtps)' % \
        (float(transaction_count[tr]) / duration)
print '%0.1f minute(s) to ramp up' % (float(rampup_end - rampup_start) / 60.0)
print '%0.1f minute steady state duration' % (duration / 60.0)
